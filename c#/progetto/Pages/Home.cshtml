@page
@model HomeModel
@{
    ViewData["Title"] = "Home Page";
}

<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <style>
        .center-content {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            text-align: center;
        }

            .center-content a {
                padding: 10px 20px;
                background-color: #4CAF50;
                color: white;
                text-decoration: none;
                border-radius: 5px;
                font-size: 18px;
            }

                .center-content a:hover {
                    background-color: #45a049;
                }

        .button {
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            font-size: 18px;
        }

            .button:hover {
                background-color: #0056b3;
            }

        table {
            width: 100%;
            margin-top: 20px;
            border-collapse: collapse;
        }

        th, td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: #f2f2f2;
        }

        .loaned-books {
            margin-top: 30px;
            padding: 10px;
            background-color: #f1f1f1;
            border-radius: 5px;
        }

            .loaned-books table {
                width: 100%;
            }

        .return-button {
            background-color: red;
            color: white;
            border: none;
            padding: 5px 10px;
            cursor: pointer;
            border-radius: 4px;
        }

            .return-button:hover {
                background-color: darkred;
            }
    </style>
</head>
<body>

    <div class="header">
        @if (HttpContext.Session.GetString("UserName") != null)
        {
            <h2>Welcome @HttpContext.Session.GetString("UserName") @HttpContext.Session.GetString("UserSurname")</h2>
            <br>
            <form method="post" action="/api/user/logout">
                <button type="submit" onclick="logout()">Logout</button>
            </form>
            <br>

            <h3>Books available for loan:</h3>
            <table class="table">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Genre</th>
                        <th>Author</th>
                        <th>ISBN</th>
                        <th>Action</th>

                    </tr>
                </thead>
                <tbody id="booksTableBody">
                </tbody>
            </table>

            <div class="loaned-books">
                <h3>Your borrowed books</h3>
                <table class="table">
                    <thead>
                        <tr>
                            <th>ISBN</th>
                            <th>Start Date</th>
                            <th>End Date</th>
                            <th>Action</th>
                            <th>Details</th>
                            <th>Alerts</th>
                        </tr>
                    </thead>
                    <tbody id="loanedBooksTableBody">
                    </tbody>
                </table>
            </div>

        }
        else
        {
            <div class="center-content">
                <p>Login non effettuato</p>
                <a href="/SignUp">Accedi</a> 
            </div>
        }
    </div>

    <script>
        function logout() {
            sessionStorage.removeItem("UserName");
            sessionStorage.removeItem("UserSurname");
            window.location.href = "/SignUp";
        }

        async function loadBooks() {
            const response = await fetch('/api/book/all');

            if (!response.ok) {
                const errorMessage = await response.text();
                console.error('Errore nella richiesta API:', errorMessage);
                return;
            }

            const books = await response.json();
            const tableBody = document.getElementById('booksTableBody');
            tableBody.innerHTML = '';

            books.forEach(book => {
                if (!book.isBooked) {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${book.title}</td>
                        <td>${book.genre}</td>
                        <td><button onclick="viewAuthor('${book.authorCF}')">${book.authorCF}</button></td>
                        <td>${book.isbn}</td>
                        <td>
                            <button onclick="borrowBook('${book.isbn}', '${book.title}', '${book.genre}')">Prendi in prestito</button>
                        </td>
                    `;
                    tableBody.appendChild(row);
                }
            });
        }

         async function viewAuthor(authorCF) {
            const response = await fetch(`/api/author/${authorCF}`);

            if (!response.ok) {
                const errorMessage = await response.text();
                console.error('Errore nella richiesta API:', errorMessage);
                return;
            }

            const author = await response.json();

            window.location.href = `/AuthorDetails?cf=${authorCF}`;
        }

        async function borrowBook(isbn, title, genre) {
            const userCF = '@HttpContext.Session.GetString("UserCF")';

            const loanData = {
                bookISBN: isbn,
                userCF: userCF,
                startDate: new Date().toISOString(),
                endDate: new Date(new Date().setDate(new Date().getDate() + 30)).toISOString() 
            };

            const response = await fetch('/api/loan', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(loanData)
            });

            if (response.ok) {
                await fetch(`/api/book/borrow/${isbn}`, {
                    method: 'PUT'
                });

                alert('Libro preso in prestito con successo!');

                loadBooks();
                loadLoanedBooks(); 
            } else {
                const errorMessage = await response.text();
                console.error('Errore nella prenotazione del libro:', errorMessage);
            }
        }

        async function returnBook(loanId, isbn) {
            const response = await fetch(`/api/loan/${loanId}`, {
                method: 'DELETE'
            });
            if (response.ok) {
                await fetch(`/api/book/return/${isbn}`, {
                    method: 'PUT'
                });

                alert('Libro restituito con successo!');

                loadBooks();
                loadLoanedBooks();
            } else {
                const errorMessage = await response.text();
                console.error('Errore nella restituzione del libro:', errorMessage);
            }
        }

        async function loadLoanedBooks() {
            const userCF = '@HttpContext.Session.GetString("UserCF")';

            const response = await fetch(`/api/loan/search?userCF=${userCF}`);

            if (!response.ok) {
                const errorMessage = await response.text();
                console.error('Errore nel caricamento dei libri presi in prestito:', errorMessage);
                return;
            }

            const loans = await response.json();
            const tableBody = document.getElementById('loanedBooksTableBody');
            tableBody.innerHTML = '';

            loans.forEach(loan => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${loan.bookISBN}</td>
                    <td>${new Date(loan.startDate).toLocaleDateString()}</td>
                    <td>${new Date(loan.endDate).toLocaleDateString()}</td>
                    <td>
                        <button class="return-button" onclick="returnBook(${loan.id}, ${loan.bookISBN})">Restituisci</button>
                    </td>
                     <td>
                        <button onclick="viewBookDetails('${loan.bookISBN}')">Visualizza Dettagli</button>
                     </td>

                `;
                tableBody.appendChild(row);
            });
        }

        async function viewBookDetails(isbn) {
            window.location.href = `/BookDetails?isbn=${isbn}`;
        }

        document.addEventListener('DOMContentLoaded', function () {
            loadBooks();
            loadLoanedBooks();
        });
    </script>

</body>
</html>
